<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="854px" preserveAspectRatio="none" style="width:574px;height:854px;background:#FFFFFF;" version="1.1" viewBox="0 0 574 854" width="574px" zoomAndPan="magnify"><defs/><g><!--MD5=[3fee75583bb7a64f68d843a3c9534ab3]
class Node--><g id="elem_Node"><rect codeLine="1" fill="#F1F1F1" height="325.0469" id="Node" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="560" x="7" y="522"/><ellipse cx="264.25" cy="538" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M267.2188,543.6406 Q266.6406,543.9375 266,544.0781 Q265.3594,544.2344 264.6563,544.2344 Q262.1563,544.2344 260.8281,542.5938 Q259.5156,540.9375 259.5156,537.8125 Q259.5156,534.6875 260.8281,533.0313 Q262.1563,531.375 264.6563,531.375 Q265.3594,531.375 266,531.5313 Q266.6563,531.6875 267.2188,531.9844 L267.2188,534.7031 Q266.5938,534.125 266,533.8594 Q265.4063,533.5781 264.7813,533.5781 Q263.4375,533.5781 262.75,534.6563 Q262.0625,535.7188 262.0625,537.8125 Q262.0625,539.9063 262.75,540.9844 Q263.4375,542.0469 264.7813,542.0469 Q265.4063,542.0469 266,541.7813 Q266.5938,541.5 267.2188,540.9219 L267.2188,543.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="284.75" y="542.8467">Node</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="566" y1="554" y2="554"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="564.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="27" y="570.9951">T data</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="580.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="93" x="27" y="587.292">Node* parent</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="597.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="69" x="27" y="603.5889">Node* left</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="613.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="27" y="619.8857">Node* right</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="566" y1="627.1875" y2="627.1875"/><ellipse cx="18" cy="640.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="47" x="27" y="644.1826">Node()</text><ellipse cx="18" cy="657.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="27" y="660.4795">Node(const T&amp; value)</text><ellipse cx="18" cy="673.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="27" y="676.7764">Node(const Node&amp; node) = delete</text><ellipse cx="18" cy="689.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="334" x="27" y="693.0732">Node&amp; operator =(const Node&amp; node) = delete</text><ellipse cx="18" cy="706.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="27" y="709.3701">Node(Node&amp;&amp; node) noexcept = default</text><ellipse cx="18" cy="722.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="408" x="27" y="725.667">Node&lt;T&gt;&amp; operator =(Node&amp;&amp; node) noexcept = default</text><ellipse cx="18" cy="738.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="27" y="741.9639">~Node()</text><ellipse cx="18" cy="754.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="27" y="758.2607">bool IsRoot() const noexcept</text><ellipse cx="18" cy="771.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="27" y="774.5576">bool IsLeaf() const noexcept</text><ellipse cx="18" cy="787.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="395" x="27" y="790.8545">friend auto operator &lt;=&gt;(const Node&amp; l, const Node&amp; r)</text><ellipse cx="18" cy="803.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="27" y="807.1514">friend bool operator ==(const Node&amp; l, const Node&amp; r)</text><ellipse cx="18" cy="820.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="375" x="27" y="823.4482">friend bool operator !=(const Node&amp; l, const Node&amp; r)</text><ellipse cx="18" cy="836.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="534" x="27" y="839.7451">friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; stream, const Node&amp; node)</text></g><!--MD5=[579f519bccbf394cec6e7b8d944c9b02]
class BinarySearchTree--><g id="elem_BinarySearchTree"><rect codeLine="22" fill="#F1F1F1" height="455.4219" id="BinarySearchTree" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="546" x="14" y="7"/><ellipse cx="221.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M224.7188,28.6406 Q224.1406,28.9375 223.5,29.0781 Q222.8594,29.2344 222.1563,29.2344 Q219.6563,29.2344 218.3281,27.5938 Q217.0156,25.9375 217.0156,22.8125 Q217.0156,19.6875 218.3281,18.0313 Q219.6563,16.375 222.1563,16.375 Q222.8594,16.375 223.5,16.5313 Q224.1563,16.6875 224.7188,16.9844 L224.7188,19.7031 Q224.0938,19.125 223.5,18.8594 Q222.9063,18.5781 222.2813,18.5781 Q220.9375,18.5781 220.25,19.6563 Q219.5625,20.7188 219.5625,22.8125 Q219.5625,24.9063 220.25,25.9844 Q220.9375,27.0469 222.2813,27.0469 Q222.9063,27.0469 223.5,26.7813 Q224.0938,26.5 224.7188,25.9219 L224.7188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="242.25" y="27.8467">BinarySearchTree</text><line style="stroke:#181818;stroke-width:0.5;" x1="15" x2="559" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="49.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="34" y="55.9951">std::vector&lt;T&gt; values</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="65.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="109" x="34" y="72.292">Node&lt;T&gt;* root</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="82.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="72" x="34" y="88.5889">size_t size</text><line style="stroke:#181818;stroke-width:0.5;" x1="15" x2="559" y1="95.8906" y2="95.8906"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="106.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="34" y="112.8857">void InOrder(Node&lt;T&gt;* node)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="122.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="34" y="129.1826">void MakeValues()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="139.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="267" x="34" y="145.4795">void InOrderRemove(Node&lt;T&gt;* node)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="155.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="520" x="34" y="161.7764">Node&lt;T&gt;* Insert(Node&lt;T&gt;* current, Node&lt;T&gt;* node, Node&lt;T&gt;* parent)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="171.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="461" x="34" y="178.0732">Node&lt;T&gt;* Find(Node&lt;T&gt;* node, const T&amp; value) const noexcept</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="188.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="261" x="34" y="194.3701">Node&lt;T&gt;* FindMin(Node&lt;T&gt;* node)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="204.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="264" x="34" y="210.667">Node&lt;T&gt;* FindMax(Node&lt;T&gt;* node)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="220.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="364" x="34" y="226.9639">void Transplant(Node&lt;T&gt;* deleted, Node&lt;T&gt;* son)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22" y="236.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="34" y="243.2607">void Swap(BinarySearchTree&amp; other) noexcept</text><ellipse cx="25" cy="256.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="34" y="259.5576">BinarySearchTree()</text><ellipse cx="25" cy="272.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="34" y="275.8545">BinarySearchTree(std::initializer_list&lt;T&gt; list)</text><ellipse cx="25" cy="288.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="383" x="34" y="292.1514">BinarySearchTree(const BinarySearchTree&lt;T&gt;&amp; other)</text><ellipse cx="25" cy="305.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="421" x="34" y="308.4482">BinarySearchTree(BinarySearchTree&lt;T&gt;&amp;&amp; other) noexcept</text><ellipse cx="25" cy="321.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="470" x="34" y="324.7451">BinarySearchTree&amp; operator=(const BinarySearchTree&lt;T&gt;&amp; other)</text><ellipse cx="25" cy="337.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="508" x="34" y="341.042">BinarySearchTree&amp; operator=(BinarySearchTree&lt;T&gt;&amp;&amp; other) noexcept</text><ellipse cx="25" cy="353.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="34" y="357.3389">virtual ~BinarySearchTree()</text><ellipse cx="25" cy="370.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="34" y="373.6357">bool Add(const T&amp; value)</text><ellipse cx="25" cy="386.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="34" y="389.9326">bool Remove(const T&amp; value)</text><ellipse cx="25" cy="402.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="34" y="406.2295">bool HasValue(const T&amp; value) const noexcept</text><ellipse cx="25" cy="419.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="210" x="34" y="422.5264">bool IsEmpty() const noexcept</text><ellipse cx="25" cy="435.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="34" y="438.8232">size_t GetSize() const noexcept</text><ellipse cx="25" cy="451.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="279" x="34" y="455.1201">std::string InOrderPrint() const noexcept</text></g><!--MD5=[f3e67eef04e00e87d6caf957e47c3739]
reverse link BinarySearchTree to Node--><g id="link_BinarySearchTree_Node"><path codeLine="51" d="M287,475.36 C287,491.09 287,506.72 287,521.93 " fill="none" id="BinarySearchTree-backto-Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="287,462.12,283,468.12,287,474.12,291,468.12,287,462.12" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[17ed29b19307c5125b5e6453da891505]
@startuml
class Node
{  
-{field}T data
-{field}Node* parent
-{field}Node* left
-{field}Node* right
+{method}Node()
+{method}Node(const T& value)
+{method}Node(const Node& node) = delete
+{method}Node& operator =(const Node& node) = delete
+{method}Node(Node&& node) noexcept = default
+{method}Node<T>& operator =(Node&& node) noexcept = default
+{method}~Node()
+{method}bool IsRoot() const noexcept
+{method}bool IsLeaf() const noexcept
+{method}friend auto operator <=>(const Node& l, const Node& r)
+{method}friend bool operator ==(const Node& l, const Node& r)
+{method}friend bool operator !=(const Node& l, const Node& r)
+{method}friend std::ostream& operator<<(std::ostream& stream, const Node& node)
}

class BinarySearchTree
{
-{field}std::vector<T> values
-{method}void InOrder(Node<T>* node)
-{method}void MakeValues()
-{method}void InOrderRemove(Node<T>* node)
-{field}Node<T>* root
-{field}size_t size
-{method}Node<T>* Insert(Node<T>* current, Node<T>* node, Node<T>* parent)
-{method}Node<T>* Find(Node<T>* node, const T& value) const noexcept
-{method}Node<T>* FindMin(Node<T>* node)
-{method}Node<T>* FindMax(Node<T>* node)		
-{method}void Transplant(Node<T>* deleted, Node<T>* son)
-{method}void Swap(BinarySearchTree& other) noexcept
+{method}BinarySearchTree()
+{method}BinarySearchTree(std::initializer_list<T> list)
+{method}BinarySearchTree(const BinarySearchTree<T>& other)
+{method}BinarySearchTree(BinarySearchTree<T>&& other) noexcept
+{method}BinarySearchTree& operator=(const BinarySearchTree<T>& other)
+{method}BinarySearchTree& operator=(BinarySearchTree<T>&& other) noexcept
+{method}virtual ~BinarySearchTree()
+{method}bool Add(const T& value)
+{method}bool Remove(const T& value)
+{method}bool HasValue(const T& value) const noexcept
+{method}bool IsEmpty() const noexcept
+{method}size_t GetSize() const noexcept
+{method}std::string InOrderPrint() const noexcept
}

BinarySearchTree *- - Node
@enduml

PlantUML version 1.2022.7(Mon Aug 22 17:01:30 UTC 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>